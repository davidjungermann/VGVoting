{"version":3,"sources":["fileselector/FileSelector.jsx","resultsView/ResultsView.jsx","container/Container.jsx","footer/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["FileSelector","props","useState","files","setFiles","enabled","setEnabled","selectedVoteCodeFile","setSelectedVoteCodeFile","selectedVoteFile","setSelectedVoteFile","errorMessageVisible","setErrorMessageVisible","useEffect","length","handleFileUpload","event","preventDefault","id","target","file","name","endsWith","file_id","uploaded_file","className","onSubmit","forEach","setVoteCodeFile","setVoteFile","setSubmitted","type","accept","onChange","htmlFor","disabled","Excel","require","NewResultsView","votingResult","setVotingResult","finalResult","setFinalResult","resultVisible","setResultVisible","resultButtonVisible","setResultButtonVisible","resultValid","setResultValid","voteLength","setVoteLength","voteLengthCorrect","setVoteLengthCorrect","codeWorkbook","setCodeWorkbook","voteWorkbook","setVoteWorkbook","voteLengthResult","setVoteLengthResult","initCodeFile","initVoteFile","workbook","Workbook","voteFile","arrayBuffer","then","buffer","xlsx","load","voteCodeFile","getVotingCodes","codes","getWorksheet","getColumn","eachCell","content","push","text","slice","getReferenceCodes","referenceCodes","getVotes","worksheet","electionVotes","columnHeaders","getRow","getElections","i","actualColumnCount","cell","prop","startsWith","votes","shift","onClick","calculateResults","result","results","vote","split","trim","replace","countVotes","previousVoters","invalidCodes","code","includes","filter","x","compareVotingCodes","array","objArray","Object","entries","key","value","s","nonVoters","compareVoteLength","newVoteButton","map","nextId","Container","submitted","Footer","App","basename","process","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f97ab857.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./FileSelector.css\";\n\nexport default function FileSelector(props) {\n  const [files, setFiles] = useState([]);\n  const [enabled, setEnabled] = useState(false);\n  const [selectedVoteCodeFile, setSelectedVoteCodeFile] = useState(\n    \"Välj en fil med röstkoder\"\n  );\n  const [selectedVoteFile, setSelectedVoteFile] = useState(\n    \"Välj en fil med röster\"\n  );\n  const [errorMessageVisible, setErrorMessageVisible] = useState(false);\n\n  /* useEffect hook that enables submit button if two files are provided. */\n  useEffect(() => {\n    if (files.length === 0) {\n      setEnabled(false);\n    } else if (files.length === 2) {\n      setEnabled(true);\n    }\n  }, [files]);\n\n  /* Called when each file is provided, set current state for component. */\n  const handleFileUpload = (event) => {\n    event.preventDefault();\n    setErrorMessageVisible(false);\n    let id = event.target.id;\n    let file = event.target.files[0];\n    if (file.name.endsWith(\"xlsx\") || file.name.endsWith(\"xls\")) {\n      setFiles([...files, { file_id: id, uploaded_file: file }]);\n      if (id === \"0\") {\n        setSelectedVoteCodeFile(file?.name);\n      } else {\n        setSelectedVoteFile(file?.name);\n      }\n    } else {\n      setErrorMessageVisible(true);\n    }\n  };\n\n  /* Called when submitting. Pushes files to Firebase Storage, and provides a download URL. */\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    files.forEach((file) => {\n      if (file?.file_id === \"0\") {\n        props.setVoteCodeFile(file?.uploaded_file);\n      } else {\n        props.setVoteFile(file?.uploaded_file);\n      }\n      props.setSubmitted(true);\n      setFiles([]);\n      setSelectedVoteCodeFile(\"Välj en fil med röstkoder\");\n      setSelectedVoteFile(\"Välj en fil med röster\");\n    });\n  };\n\n  return (\n    <div className=\"container\">\n      <form className=\"upload-container\" onSubmit={handleSubmit}>\n        <div className=\"upload-btn\">\n          <h3 className=\"file-upload-header\">Röstkoder</h3>\n          <input\n            id={0}\n            name=\"file\"\n            type=\"file\"\n            accept=\".xlsx\"\n            className=\"file-input\"\n            onChange={handleFileUpload}\n          />\n          <label htmlFor={0}>{selectedVoteCodeFile}</label>\n        </div>\n        <div className=\"upload-btn\">\n          <h3 className=\"file-upload-header\">Röster</h3>\n          <input\n            id={1}\n            type=\"file\"\n            accept=\".xlsx\"\n            className=\"file-input\"\n            onChange={handleFileUpload}\n          />\n          <label htmlFor={1}>{selectedVoteFile}</label>\n          {errorMessageVisible ? (\n            <div className=\"error-message-root\">\n              <span className=\"error-message\">Filen måste vara av typen .xlsx eller .xls.</span>\n            </div>\n          ) : null}\n        </div>\n        {enabled ? (\n          <div className=\"submit-btn-root\">\n            <button className=\"btn btn-success btn-lg\" type=\"submit\">\n              Ladda upp\n            </button>\n          </div>\n        ) : (\n          <div className=\"submit-btn-root\">\n            <button className=\"btn btn-success btn-lg\" type=\"submit\" disabled>\n              Ladda upp\n            </button>\n          </div>\n        )}\n      </form>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport nextId from \"react-id-generator\";\nconst Excel = require(\"exceljs\");\n\n/* Renders the Results based on outcome. TODO: JSX needs abstraction and reformatting. */\n\nexport default function NewResultsView(props) {\n  const [votingResult, setVotingResult] = useState([]);\n  const [finalResult, setFinalResult] = useState([]);\n  const [resultVisible, setResultVisible] = useState(false);\n  const [resultButtonVisible, setResultButtonVisible] = useState(true);\n  const [resultValid, setResultValid] = useState(null);\n  const [voteLength, setVoteLength] = useState(0);\n  const [voteLengthCorrect, setVoteLengthCorrect] = useState(null);\n  const [codeWorkbook, setCodeWorkbook] = useState(null);\n  const [voteWorkbook, setVoteWorkbook] = useState(null);\n  const [voteLengthResult, setVoteLengthResult] = useState(null);\n\n  useEffect(() => {\n    initCodeFile();\n    initVoteFile();\n  }, []);\n\n  const initVoteFile = () => {\n    var workbook = new Excel.Workbook();\n    const voteFile = props.voteFile;\n    voteFile.arrayBuffer().then((buffer) => {\n      workbook.xlsx.load(buffer);\n    });\n    setVoteWorkbook(workbook);\n  };\n\n  const initCodeFile = () => {\n    var workbook = new Excel.Workbook();\n    const voteCodeFile = props.voteCodeFile;\n    voteCodeFile.arrayBuffer().then((buffer) => {\n      workbook.xlsx.load(buffer);\n    });\n    setCodeWorkbook(workbook);\n  };\n\n  const getVotingCodes = () => {\n    let codes = [];\n    const workbook = voteWorkbook;\n    workbook\n      .getWorksheet()\n      .getColumn(\"B\")\n      .eachCell((content) => codes.push(content.text));\n    return codes.slice(1);\n  };\n\n  const getReferenceCodes = () => {\n    let referenceCodes = [];\n    const workbook = codeWorkbook;\n    workbook\n      .getWorksheet()\n      .getColumn(\"A\")\n      .eachCell((content) => referenceCodes.push(content.text));\n    return referenceCodes;\n  };\n\n  const compareVoteLength = () => {\n    var nonVoters = [];\n    let codes = getVotingCodes();\n    let referenceCodes = getReferenceCodes();\n    if (referenceCodes.length > codes.length) {\n      setResultValid(false);\n      setVoteLengthCorrect(false);\n      let difference = referenceCodes.filter((x) => !codes.includes(x));\n      difference.forEach((code) => {\n        nonVoters.push(\"Registrerad, men har ej röstat: \" + code);\n      });\n    } else if (referenceCodes.length < codes.length) {\n      setVoteLengthCorrect(false);\n    } else {\n      setVoteLengthCorrect(true);\n    }\n    return nonVoters;\n  };\n\n  const compareVotingCodes = () => {\n    let previousVoters = [];\n    let codes = getVotingCodes();\n    let referenceCodes = getReferenceCodes();\n    var result = [];\n    var invalidCodes = [];\n\n    codes.forEach((code) => {\n      if (referenceCodes.includes(code)) {\n        previousVoters.push(code);\n        result.push(\"Giltig röst: \" + code);\n        referenceCodes = referenceCodes.filter((x) => x !== code);\n      } else if (previousVoters.includes(code)) {\n        invalidCodes.push(\"Ogiltig röst, har röstat mer än 1 gång: \" + code);\n        setResultValid(false);\n      } else {\n        invalidCodes.push(\"Ogiltig röst, ej registrerad: \" + code);\n        setResultValid(false);\n      }\n    });\n    if (invalidCodes.length === 0) {\n      setResultValid(true);\n    }\n    return [result, invalidCodes];\n  };\n\n  const getElections = () => {\n    var columnHeaders = {};\n    const workbook = voteWorkbook;\n    workbook\n      .getWorksheet()\n      .getRow(1)\n      .eachCell((content) => {\n        if (content.text !== \"Tidstämpel\" && content.text !== \"Valkod\") {\n          columnHeaders[content.text] = [];\n        }\n      });\n    return columnHeaders;\n  };\n\n  const getVotes = () => {\n    const workbook = voteWorkbook;\n    let worksheet = workbook.getWorksheet();\n    let electionVotes = getElections();\n    for (let i = 3; i <= worksheet.actualColumnCount; i++) {\n      worksheet.getColumn(i).eachCell((cell) => {\n        for (let prop in electionVotes) {\n          if (cell.text.startsWith(prop)) {\n            let votes = electionVotes[prop];\n            votes.push(cell.text);\n            electionVotes[prop] = votes;\n          }\n        }\n      });\n    }\n    for (let prop in electionVotes) {\n      electionVotes[prop].shift();\n    }\n    return electionVotes;\n  };\n\n  const countVotes = () => {\n    const votes = getVotes();\n    const results = {};\n    for (let prop in votes) {\n      votes[prop].forEach((vote) => {\n        vote = vote.split(\",\");\n        vote.forEach((vote) => {\n          vote = vote.trim();\n          if (vote.endsWith(\"*\")) {\n            vote = vote.replace(/\\*/g, \"\");\n          }\n          results[vote] = results[vote] + 1 || 1;\n        });\n      });\n    }\n    return results;\n  };\n\n  const onClick = (event) => {\n    props.setSubmitted(false);\n    event.preventDefault();\n  };\n\n  const calculateResults = () => {\n    var result = countVotes();\n    var votingResult = [];\n    compareVotingCodes().forEach((array) =>\n      array.forEach((vote) => votingResult.push(vote))\n    );\n    var objArray = Object.entries(result);\n    var finalResult = [];\n\n    objArray.forEach(([key, value]) => {\n      if (value === 1) {\n        var s = \" röst\";\n      } else {\n        s = \" röster\";\n      }\n      finalResult.push(key + \": \" + value + s);\n    });\n    setVotingResult(votingResult);\n    setFinalResult(finalResult);\n    setResultVisible(true);\n    setResultButtonVisible(false);\n    setVoteLength(getReferenceCodes().length);\n    setVoteLengthResult(compareVoteLength());\n  };\n\n  const resultButton = () => {\n    return (\n      <div className=\"col text-center\">\n        <button\n          type=\"button\"\n          className=\"btn btn-success m-4 btn-lg\"\n          onClick={calculateResults}\n        >\n          Visa valresultat\n        </button>\n      </div>\n    );\n  };\n\n  const newVoteButton = () => {\n    return (\n      <div className=\"col text-center\">\n        <button\n          type=\"button\"\n          className=\"btn btn-success m-4 btn-lg\"\n          onClick={onClick}\n        >\n          Genomför en ny röstning\n        </button>\n      </div>\n    );\n  };\n\n  const resultList = () => {\n    if (resultValid && voteLengthCorrect) {\n      return (\n        <div className=\"container w-75\">\n          <h1>\n            <b>Resultat</b>\n          </h1>\n          <ul className=\"list-group\">\n            {finalResult.map((result) => (\n              <li key={nextId()} className=\"list-group-item\">\n                {\" \"}\n                {<h3> {result}</h3>}\n              </li>\n            ))}\n          </ul>\n          <br></br>\n          <br></br>\n          <br></br>\n          <h1>\n            <b>Röstvalidering</b>\n          </h1>\n          <br></br>\n          <h3>\n            <b>Antal röstande: {votingResult.length}</b>\n          </h3>\n          <h3>\n            <b>Röstlängd: {voteLength}</b>\n          </h3>\n          <br></br>\n          <ul className=\"list-group\">\n            {votingResult.map((result) => (\n              <li key={nextId()} className=\"list-group-item\">\n                {\" \"}\n                {<h3> {result}</h3>}\n              </li>\n            ))}\n          </ul>\n          {newVoteButton()}\n        </div>\n      );\n    } else if (resultValid && !voteLengthCorrect) {\n      return (\n        <div className=\"container w-75\">\n          <h5>\n            <b>\n              Röstningen är inte giltig. Röstlängd och antalet röster stämmer\n              överensstämmer inte.\n            </b>\n          </h5>\n          <br></br>\n          <ul className=\"list-group\">\n            {voteLengthResult.map((result) => (\n              <li key={nextId()} className=\"list-group-item\">\n                {\" \"}\n                {<h3> {result}</h3>}\n              </li>\n            ))}\n          </ul>\n          <li className=\"list-group-item\">\n            <h5>Antal röstande: {votingResult.length}</h5>\n            <h5>Röstlängd: {voteLength}</h5>\n          </li>\n          {newVoteButton()}\n        </div>\n      );\n    } else if (!resultValid && voteLengthCorrect) {\n      return (\n        <div className=\"container w-75\">\n          <h5>\n            <b>\n              Röstningen är inte giltig. Ta bort ogiltiga röster ur Excel-arket\n              och ladda upp igen:{\" \"}\n            </b>\n          </h5>\n          <br></br>\n          <ul className=\"list-group\">\n            {votingResult.map((result) => (\n              <li key={nextId()} className=\"list-group-item\">\n                {\" \"}\n                {<h3> {result}</h3>}\n              </li>\n            ))}\n          </ul>\n          {newVoteButton()}\n        </div>\n      );\n    } else if (!resultValid && !voteLengthCorrect) {\n      return (\n        <div className=\"container w-75\">\n          <h5>\n            <b>\n              Röstningen är inte giltig. Ta bort ogiltiga röster ur Excel-arket\n              och ladda upp igen:{\" \"}\n            </b>\n          </h5>\n          <br></br>\n          <ul className=\"list-group\">\n            {votingResult.map((result) => (\n              <li key={nextId()} className=\"list-group-item\">\n                {\" \"}\n                {<h3> {result}</h3>}\n              </li>\n            ))}\n          </ul>\n          <br></br>\n          <ul className=\"list-group\">\n            {voteLengthResult.map((result) => (\n              <li key={nextId()} className=\"list-group-item\">\n                {\" \"}\n                {<h3> {result}</h3>}\n              </li>\n            ))}\n          </ul>\n          <br></br>\n          <h5>\n            <b>\n              Röstningen är inte giltig. Röstlängd och antalet röster stämmer\n              överensstämmer inte.\n            </b>\n          </h5>\n          <br></br>\n          <li className=\"list-group-item\">\n            <h5>Antal röstande: {votingResult.length}</h5>\n            <h5>Röstlängd: {voteLength}</h5>\n          </li>\n          {newVoteButton()}\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div className=\"container w-50\">\n      {resultVisible ? resultList() : null}\n      <div className=\"row\"></div>\n      {resultButtonVisible ? resultButton() : null}\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport FileSelector from \"../fileselector/FileSelector.jsx\";\nimport ResultsView from \"../resultsView/ResultsView\";\nimport \"./Container.css\";\n\nexport default function Container() {\n  const [submitted, setSubmitted] = useState(false);\n  const [voteCodeFile, setVoteCodeFile] = useState(null);\n  const [voteFile, setVoteFile] = useState(null);\n\n  return (\n    <div className=\"container-root\">\n      <div className=\"jumbotron text-center\">\n        <h1 className=\"display-4\">Rösträknare </h1>\n        <p className=\"lead\">Västgöta Nation</p>\n      </div>\n      {submitted ? (\n        <ResultsView\n          setSubmitted={setSubmitted}\n          voteCodeFile={voteCodeFile}\n          voteFile={voteFile}\n        ></ResultsView>\n        \n      ) : (\n        <FileSelector\n          setSubmitted={setSubmitted}\n          setVoteCodeFile={setVoteCodeFile}\n          setVoteFile={setVoteFile}\n        ></FileSelector>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./Footer.css\";\nexport default function Footer() {\n  return <div className=\"footer\">\n      <span className=\"support-text\">Frågor: david.jungermann@gmail.com</span>\n  </div>;\n}\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Container from \"./container/Container.jsx\";\nimport Footer from \"./footer/Footer.jsx\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <Container></Container>\n        <Footer></Footer>\n      </Router>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/js/bootstrap.js\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}